{
  "hash": "ca89b9cd701c1c87246025a8e471bcac",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Writing Functions\n---\n\n\n\n\n:::{.callout-tip}\n## Learning Objectives\n\n-   Explain the importance of using and developing functions\n-   Create custom functions using R code\n-   Document functions to improve understanding and code communication\n:::\n\n## R Functions\n\n::: {.callout-note}\n### Quick reminder: What is a function?\n\nA set of statements or expressions of code that are organized together to perform a specific task.\n\nThe statements or expressions of code within the function accept accept user input(s), does something with it, and returns a useful output.\n\nSyntax: ```result_value <- function_name(argument1 = value1, argument2 = value2, ...)```\n:::\n\nMany people write R code as a single, continuous stream of commands, often drawn from the R Console itself and simply pasted into a script. While any script brings benefits over non-scripted solutions, there are advantages to breaking code into small, reusable modules. This is the role of a **function** in R. In this lesson, we will review the advantages of coding with functions, practice by creating some functions and show how to call them, and then do some exercises to build other simple functions.\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n### Why Functions?\n\n::: {.callout-important appearance=\"simple\"}\n**DRY: Don't Repeat Yourself**\n:::\n\n>\"You should consider writing a function whenever you've copied and pasted a block of code more than twice (i.e. you now have three copies of the same code).\"\n>\n> *[Chapter 19 Functions](https://r4ds.had.co.nz/functions.html) in R for Data Science (Grolemund & Wickham)*\n\nBy creating small functions that only complete one logical task and do it well, we quickly gain:\n\n-   Improved understanding\n-   Reuse via decomposing tasks into bite-sized chunks\n-   Improved error testing\n\n\n::: {.callout-tip}\n#### Naming Functions\nThe name of a function is important. Ideally, function names should be short, but still clearly captures what the function does.\n\nBest Practices from [Chapter 19 Functions](https://r4ds.had.co.nz/functions.html) in R for Data Science:\n\n- Function names should be verbs and arguments should be nouns (there are [exceptions](https://r4ds.had.co.nz/functions.html#functions-are-for-humans-and-computers)).\n- Use the `snake_case` naming convention for functions that are multiple words.\n- For a \"family\" of functions, use a common prefix to indicate that they are connected.\n:::\n\n### Exercise: Temperature Conversion \n\nImagine you have a bunch of data measured in Fahrenheit and you want to convert that for analytical purposes to Celsius. You might have an R script that does this for you.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairtemps <- c(212, 30.3, 78, 32)\ncelsius1 <- (airtemps[1] - 32) * 5/9\ncelsius2 <- (airtemps[2] - 32) * 5/9\ncelsius3 <- (airtemps[3] - 32) * 5/9\n```\n:::\n\n\n\n\nNote the duplicated code, where the same formula is repeated three times. This code would be both more compact and more reliable if we didn't repeat ourselves.\n\n#### Create a Function that Converts Fahrenheit to Celsius {.unnumbered}\n\nFunctions in R are a mechanism to process some input and return a value. Similarly to other variables, functions can be assigned to a variable so that they can be used throughout code by reference. To create a function in R, you use the `function` function (so meta!) and assign its result to a variable. Let's create a function that calculates Celsius temperature outputs from Fahrenheit temperature inputs.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfahr_to_celsius <- function(fahr) {\n  celsius <- (fahr - 32) * 5/9\n  return(celsius)\n}\n```\n:::\n\n\n\n\nBy running this code, we have created a function and stored it in R's global environment. The `fahr` argument to the `function` function indicates that the function we are creating takes a single parameter (the temperature in Fahrenheit), and the `return` statement indicates that the function should return the value in the `celsius` variable that was calculated inside the function. Let's use it, and check if we got the same value as before:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncelsius4 <- fahr_to_celsius(airtemps[1])\ncelsius4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 100\n```\n\n\n:::\n\n```{.r .cell-code}\ncelsius1 == celsius4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\nExcellent. So now we have a conversion function we can use. Note that, because most operations in `R` can take multiple types as inputs, we can also pass the original vector of `airtemps`, and calculate all of the results at once:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncelsius <- fahr_to_celsius(airtemps)\ncelsius\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 100.0000000  -0.9444444  25.5555556   0.0000000\n```\n\n\n:::\n:::\n\n\n\n\nThis takes a vector of temperatures in Fahrenheit, and returns a vector of temperatures in Celsius.\n\n#### Your Turn: Create a Function that Converts Celsius to Fahrenheit {.unnumbered}\n\n::: {.callout-exercise}\n\nCreate a function named `celsius_to_fahr` that does the reverse, it takes temperature data in Celsius as input, and returns the data converted to Fahrenheit. \n\nCreate the function `celsius_to_fahr` in a new R Script file.\n\nThen use that formula to convert the `celsius` vector back into a vector of Fahrenheit values, and compare it to the original `airtemps` vector to ensure that your answers are correct. \n\n:::{.callout-hint}\n**Hint:** the formula for Celsius to Fahrenheit conversions is `celsius * 9/5 + 32`.\n:::\n\nDid you encounter any issues with rounding or precision?\n\n::: {.callout-answer}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncelsius_to_fahr <- function(celsius) {\n    fahr <- celsius * 9/5 + 32\n    return(fahr)\n}\n\nresult <- celsius_to_fahr(celsius)\nairtemps == result\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE TRUE TRUE TRUE\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n:::\n\n### Documenting R Functions\n\nFunctions need documentation so that we can communicate what they do, and why. The [`roxygen2` R package](https://roxygen2.r-lib.org/) provides a simple means to document your functions so that you can explain what the function does, the assumptions about the input values, a description of the value that is returned, and the rationale for decisions made about implementation.\n\nDocumentation in `roxygen2` is placed immediately before the function definition, and is indicated by a special comment line that always starts with the characters `#'`. Here's a documented version of a function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Convert temperature values from Fahrenheit to Celsius\n#'\n#' @param fahr Numeric or numeric vector in degrees Fahrenheit\n#' \n#' @return Numeric or numeric vector in degrees Celsius\n#' @export\n#' \n#' @examples\n#' fahr_to_celsius(32)\n#' fahr_to_celsius(c(32, 212, 72))\n\nfahr_to_celsius <- function(fahr) {\n  celsius <- (fahr - 32) * 5/9\n  return(celsius)\n}\n```\n:::\n\n\n\n\nNote the use of the `@param` keyword to define the expectations of input data, and the `@return` keyword for defining the value that is returned from the function. The `@examples` function is useful as a reminder as to how to use the function. Finally, the `@export` keyword indicates that, if this function were added to a package, then the function should be available to other code and packages to utilize.\n\n::: {.callout-note}\n\n# Check it out: Function Documentation Section from R Packages (2e)\n\nFor more best practices on function documentation, review Hadley Wickham and Jennifer Bryan's online book [R Packages (2e)](https://r-pkgs.org/) - [Chapter 10, Section 16: Function Documentation](https://r-pkgs.org/man.html).\n\n:::\n\n\n### Exercise: Minimizing Work with Functions\n\nFunctions can of course be as simple or complex as needed. They can be be very effective in repeatedly performing calculations, or for bundling a group of commands that are used on many different input data sources. For example, we might create a simple function that takes Fahrenheit temperatures as input, and calculates both Celsius and Kelvin temperatures. All three values are then returned in a list, making it very easy to create a comparison table among the three scales.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconvert_temps <- function(fahr) {\n  celsius <- (fahr - 32) * 5/9\n  kelvin <- celsius + 273.15\n  return(list(fahr = fahr, celsius = celsius, kelvin = kelvin))\n}\n\ntemps_df <- data.frame(convert_temps(seq(-100,100,10)))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-9002d181a96155f19ea4\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-9002d181a96155f19ea4\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\"],[-100,-90,-80,-70,-60,-50,-40,-30,-20,-10,0,10,20,30,40,50,60,70,80,90,100],[-73.33333333333333,-67.77777777777777,-62.22222222222222,-56.66666666666666,-51.11111111111111,-45.55555555555556,-40,-34.44444444444444,-28.88888888888889,-23.33333333333333,-17.77777777777778,-12.22222222222222,-6.666666666666667,-1.111111111111111,4.444444444444445,10,15.55555555555556,21.11111111111111,26.66666666666667,32.22222222222222,37.77777777777778],[199.8166666666667,205.3722222222222,210.9277777777777,216.4833333333333,222.0388888888889,227.5944444444444,233.15,238.7055555555555,244.2611111111111,249.8166666666666,255.3722222222222,260.9277777777777,266.4833333333333,272.0388888888889,277.5944444444444,283.15,288.7055555555555,294.2611111111111,299.8166666666667,305.3722222222222,310.9277777777777]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>fahr<\\/th>\\n      <th>celsius<\\/th>\\n      <th>kelvin<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"fahr\",\"targets\":1},{\"name\":\"celsius\",\"targets\":2},{\"name\":\"kelvin\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\nOnce we have a dataset like that, we might want to plot it. One thing that we do repeatedly is set a consistent set of display elements for creating graphs and plots. By using a function to create a custom `ggplot` theme, we can enable to keep key parts of the formatting flexible. For example, in the `custom_theme` function, we provide a `base_size` argument that defaults to using a font size of 9 points. Because it has a default set, it can safely be omitted. But if it is provided, then that value is used to set the base font size for the plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_theme <- function(base_size = 9) {\n    ggplot2::theme(\n      text             = ggplot2::element_text(family = 'Helvetica', \n                                               color = 'gray30', \n                                               size = base_size),\n      plot.title       = ggplot2::element_text(size = ggplot2::rel(1.25), \n                                               hjust = 0.5, \n                                               face = 'bold'),\n      panel.background = ggplot2::element_blank(),\n      panel.border     = ggplot2::element_blank(),\n      panel.grid.minor = ggplot2::element_blank(),\n      panel.grid.major = ggplot2::element_line(colour = 'grey90', \n                                               linewidth = 0.25),\n      legend.position  = 'right',\n      legend.key       = ggplot2::element_rect(colour = NA, \n                                               fill = NA),\n      axis.ticks       = ggplot2::element_blank(),\n      axis.line        = ggplot2::element_blank()\n      )\n}\n\nlibrary(ggplot2)\n\nggplot(temps_df, mapping = aes(x = fahr, y = celsius, color = kelvin)) +\n    geom_point() +\n    custom_theme(10)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](s16_r_functions_files/figure-html/func-custom-theme-1.png){width=672}\n:::\n:::\n\n\n\n\nIn this case, we set the font size to 10, and plotted the air temperatures. The `custom_theme` function can be used anywhere that one needs to consistently format a plot.\n\nBut we can go further. One can wrap the entire call to ggplot in a function, enabling one to create many plots of the same type with a consistent structure. For example, we can create a `scatterplot` function that takes a data frame as input, along with a point_size for the points on the plot, and a font_size for the text.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscatterplot <- function(df, point_size = 2, font_size = 9) {\n  ggplot(df, mapping = aes(x = fahr, y = celsius, color = kelvin)) +\n    geom_point(size = point_size) +\n    custom_theme(font_size)\n}\n```\n:::\n\n\n\n\nCalling that let's us, in a single line of code, create a highly customized plot but maintain flexibility via the arguments passed in to the function. Let's set the point size to 3 and font to 16 to make the plot more legible.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscatterplot(temps_df, point_size = 3, font_size = 16)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](s16_r_functions_files/figure-html/func-call-sp-1.png){width=672}\n:::\n:::\n\n\n\n\nOnce these functions are set up, all of the plots built with them can be reformatted by changing the settings in just the functions, whether they were used to create 1, 10, or 100 plots.\n\n:::{.callout-tip}\n### Summary\n\n-   Functions are useful to reduce redundancy, reuse code, and reduce errors\n-   Build functions with `function()`\n-   Document functions with `roxygen2` comments\n\n:::\n\n::: {.callout-tip}\n#### Workflow for Creating Functions\n\n1. Have a clear goal (sometimes it helps to create a visual).\n2. Outline the plan and then add more detailed steps or tasks.\n3. Build it up bit-by-bit and start with a minimum viable example. As your function becomes more complex, it can harder to track all the bits.\n4. Always check intermediates!\n:::\n",
    "supporting": [
      "s16_r_functions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}