{
  "hash": "9b0a245dfd31bc6edde7d0a0c7543ef5",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    slide-number: true\n    code-link: true\n    highlight-style: a11y\n    chalkboard: true\n    theme:\n      - lh_slides_style.scss ### this lives in folder with slide qmd file\nexecute:\n  echo: true\n  code-line-numbers: false\n---\n\n## {#title-slide data-menu-title=\"Title Slide\"} \n\n[Scripts in R and RStudio]{.custom-title}\n\n[An introduction to programming in R]{.custom-subtitle}\n\n<hr class=\"hr-red\">\n\n[**NCEAS Learning Hub**]{.custom-subtitle2}\n\n---\n\n## {#script1 data-menu-title=\"script1\"} \n\n[Creating an R script]{.slide-title}\n\n::: {.columns}\n\n:::: {.column width=\"60%\"}\n\n![](images/rstudio_script1.png){width=100%}\n:::: \n<!-- end left column -->\n\n:::: {.column width=\"40%\"}\n\n::::: {.body-text}\nFrom the \"File\" menu, select \"New File,\" then choose \"R Script\" from the list of options. (We'll look at other options later, particularly \"Quarto document\")\n\nYou can also create the script from the \"new file\" button in the **Files** pane.\n\nNotice a new pane appears above the Console. This is called the **Source pane** and is where we write and edit R code and documents. This pane is only present if there are files open in the editor.\n:::::\n\n:::: \n<!-- end right column -->\n\n::: \n<!-- end .columns -->\n\n:::{.body-text}\nSave the R Script in your `script` folder, name the file `intro_to_programming.R`.  The name at the top of the **Source pane** will change from `Untitled` to the new file name.\n:::\n\n---\n\n[A simple script]{.slide-title}\n\n:::{.body-text}\nLet's write some simple code in our script.  We'll start with the age of a dog in (human) years, then convert to dog years.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage_years <- 5\n\nage_dog_years <- age_years * 7\n```\n:::\n\n\n:::{.body-text}\nAfter typing those lines, do you see the values in the **Environment** pane?  Probably not - unlike the **Console**, the script does not automatically run the code when you type it in.\n\nTo interpret and run the code you've written, R needs you to send the code from the script (or editor) to the Console to execute it. To run code in an R Script:\n\n* Place your cursor on (or at the end of) a line of code you want to run, or highlight the line(s). \n* Then use the shortcut `command` + `enter` (Mac) or `control` + `enter` (Windows), or click the green `Run` button in the top right of the Source pane.\n\nTry these shortcuts out and get comfortable with them - you will do this a lot!\n:::\n\n---\n\n:::{.callout-tip}\n### Writing human-readable comments\n:::\n\n::: {.body-text}\nUse the pound sign/hashtag `#` at the start of a line to create a comment - R will not run any text after that, so you can add human-readable comments to help explain what the code is doing.\n\nComments can also be used to \"comment out\" a line of code to temporarily prevent it from running.  Use `command` `shift` `C` as a shortcut to toggle this.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### age in human years\nage_years <- 5  ### can also put comments on the same line as code\n\n### age in dog years\nage_dog_years <- age_years * 7\n\n### this line is commented out so will not run:\n# age_centuries <- age_years / 100 \n```\n:::\n\n\n---\n\n[Multiple values]{.slide-title}\n\n:::{.body-text}\n\nYou can also store more than one value in a single object. Storing a series of ages in a single object is a convenient way to perform the same operation on multiple values at the same time. One way to create such an object is with the function `c()`, which stands for \"combine\".\n\nLet's create a **vector** of ages using `c()` (we'll talk more about vectors in the next section, [Data structures in R](#data_structures)).\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage_yrs <- c(5, 3, 7)  ### create a vector of ages\n\nyr_to_dog_yr <- 7      ### save the conversion factor as an object\n\n### convert `age_yrs` to dog years:\nage_dog_yrs <- age_yrs * yr_to_dog_yr \n\n### inspect the values\nage_dog_yrs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 35 21 49\n```\n\n\n:::\n:::\n\n\n---\n\n::: {.callout-tip}\n#### Quick Tips\n\nYou will make many objects and the assignment operator `<-` can be tedious to type over and over. Instead, use **RStudio's keyboard shortcut: `option` + `-` (the minus sign)**. (use `alt` instead of `option` for Windows)\n\nNotice that the RStudio shortcut automatically surrounds `<-` with spaces, which demonstrates a useful code formatting practice. Code is miserable to read on a good day. Give your eyes a break and use spaces.\n\nRStudio offers many handy [keyboard shortcuts](https://support.rstudio.com/hc/en-us/articles/200711853-Keyboard-Shortcuts). Also, `option`+`Shift`+`K` brings up a keyboard shortcut reference card.\n\nFor more RStudio tips, check out Master of Environmental Data Science (MEDS) workshop: [IDE Tips & Tricks](https://ucsb-meds.github.io/IDE-tips-and-tricks/#/title-slide).\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}