{
  "hash": "5197dbc8e6ab6f5c8240c70931e5f264",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    slide-number: true\n    code-link: true\n    highlight-style: a11y\n    chalkboard: true\n    theme:\n      - lh_slides_style.scss ### this lives in folder with slide qmd file\nexecute:\n  echo: true\n  code-line-numbers: false\n---\n\n## {#title-slide data-menu-title=\"Title Slide\"} \n\n[Data types & structures in R]{.custom-title}\n\n[An introduction to programming in R]{.custom-subtitle}\n\n<hr class=\"hr-red\">\n\n[**NCEAS Learning Hub**]{.custom-subtitle2}\n\n---\n\n[Common data types in R]{.slide-title}\n\n::: {.body-text}\nA single element of data in R typically falls into one of these types, or \"classes\" (there are others, but they are beyond the scope of this course):\n\n* `logical` (sometimes called `boolean`): Data take on the value of either `TRUE` or `FALSE`. \n* `integer`: Data are whole numbers (those numbers without a decimal point), e.g., `1`, `2`, `-999`. To explicitly create an integer data type, use the suffix `L` (e.g. `x <- 2L`).\n* `numeric` (also called `double`): Data are numbers that contain a decimal, e.g., `0.001`, `1.0`, `-273.16`.\n* `character`: Data are text values, or \"strings\", e.g., `\"cat\"`, `\"I like bananas\"`, or `\"Everest is 8848.9 m tall\"`. You can think of character strings as a word or sentence or paragraph. A special type of character string is a `factor`, which is a string but with additional attributes (like levels or an order). \n\nAny of these can also contain `NA` to represent missing values. \n\n:::\n\n---\n\n[Common data types in R]{.slide-title}\n\n::: {.callout-tip}\n### Quick Tip\n:::\n\n:::{.body-text}\nYou can see what data type or class an object is using the `class()` function, or you can use a logical test such as: `is.numeric()`, `is.character()`, `is.logical()`, and so on.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscience_rocks <- \"yes it does!\"\nclass(science_rocks)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nis.numeric(science_rocks)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nis.character(science_rocks)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n---\n\n[Data structures in R]{.slide-title}\n\n::: {.body-text}\nWorking with more than one data point, we need to think about how to systematically organize and store collections of data.  Here are five common data structures used in R (and other programming languages):\n:::\n\n![](images/data_structures.png)\n\n---\n\n[Data structures in R: vectors]{.slide-title}\n\nA **vector** is the most common and most basic data structure in R.\n\n::: {.columns}\n\n:::: {.column width=\"30%\"}\n\n![](images/data_structures_vector.png){width=100%}\n:::: \n<!-- end left column -->\n\n:::: {.column width=\"70%\"}\n\n::::: {.body-text}\n* A vector contains one or more elements, all with the same data type.\n* Think back to our `age_yrs` vector. That was a vector of three elements each with a data type of `numeric`.\n* We can create a vector using the `c()` function (\"combine\"):\n:::::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage_yrs = c(5, 3, 7)\n```\n:::\n\n\n:::: \n<!-- end right column -->\n\n::: \n<!-- end .columns -->\n\n---\n\n[Data structures in R: vectors]{.slide-title}\n\n:::{.body-text}\nEach vector can contain only one data type/class.  If you try to combine classes, R will \"coerce\" the other elements to the least restrictive class: `logical` --> `integer` --> `numeric` --> `character`\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchr_vec <- c(\"hello\", \"goodbye\", \"see you later\"); class(chr_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnumeric_vec <- c(5, 1.3, 10); class(numeric_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlogical_vec <- c(TRUE, FALSE, TRUE); class(logical_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n\n```{.r .cell-code}\n### use c() to combine different types; what's the result?\ncombined_vec <- c(TRUE, 3.14, \"puppies!\"); class(combined_vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncombined_vec ### look, all elements are character (in quotes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"TRUE\"     \"3.14\"     \"puppies!\"\n```\n\n\n:::\n:::\n\n\n---\n\n[Data structures in R: vectors]{.slide-title}\n\n:::{.body-text}\nYou can set or retrieve a value of an element in a vector using that element's \"index\" or position.\n\nA set of single square brackets `[...]` is used to select an element or set of elements for vectors.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumeric_vec <- c(5, 1.3, 10, 2.8, 17, -1)\n\nnumeric_vec[2]          ### retrieve the second element\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.3\n```\n\n\n:::\n\n```{.r .cell-code}\nnumeric_vec[3:5]        ### retrieve the third through fifth element\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10.0  2.8 17.0\n```\n\n\n:::\n\n```{.r .cell-code}\nnumeric_vec[c(1, 3, 6)] ### use a vector to retrieve elements\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5 10 -1\n```\n\n\n:::\n\n```{.r .cell-code}\nnumeric_vec[2] <- 3.14  ### set the value of the second element\nnumeric_vec             ### element 2 has been changed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5.00  3.14 10.00  2.80 17.00 -1.00\n```\n\n\n:::\n:::\n\n\n---\n\n[Data structures in R: matrix and array]{.slide-title}\n\n::: {.body-text}\nMatrices and arrays are like vectors, but two-dimensional and N-dimensional, respectively.\n:::\n\n::: {.columns}\n\n:::: {.column width=\"50%\"}\n\n![](images/data_structures_matrix_array.png){width=100%}\n:::: \n<!-- end left column -->\n\n:::: {.column width=\"50%\"}\n\n::::: {.body-text}\n* A **vector** has only one dimension (length)\n* A **matrix** has two dimensions (rows/columns).\n* An **array** has more than two dimensions (e.g., a cube, but can also contain as many dimensions as you need)\n\n:::::\n\n:::: \n<!-- end right column -->\n\n::: \n<!-- end .columns -->\n\n::: {.body-text}\nLike a vector, all elements of a matrix or array must be of the same type.\n:::\n\n:::{.callout-tip}\nMatrices and arrays are useful for mathematical purposes, e.g., linear algebra, but not as commonly used for data science purposes, so we'll skip right on past them!\n:::\n\n---\n\n[Data structures in R: lists]{.slide-title}\n\nA **list** is another common and basic data structure in R.\n\n::: {.columns}\n\n:::: {.column width=\"40%\"}\n\n![](images/data_structures_list.png){width=100%}\n:::: \n<!-- end left column -->\n\n:::: {.column width=\"60%\"}\n\n::::: {.body-text}\n* Like a vector, a list contains one or more elements, but *unlike* a vector, each element can be a different type (including vectors and other lists!).\n* We can create a list using the `list()` function.\n:::::\n\n:::: \n<!-- end right column -->\n\n::: \n<!-- end .columns -->\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### a list containing three numeric elements:\nlist_of_nums <- list(5, 3.14, -999)\n\n### a list containing elements of different types\nlist_of_stuff <- list(5, 7:10, c(\"puppies\", \"kittens\"), c(TRUE, FALSE))\nlist_of_stuff[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  7  8  9 10\n```\n\n\n:::\n:::\n\n\n---\n\n[Data structures in R: lists]{.slide-title}\n\n:::{.body-text}\nLike a vector, you can set or retrieve a value of an element in a **list** using that element's \"index\" or position.\n\nA set of **double** square brackets `[[...]]` is used to select an element or set of elements for lists.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### a list containing elements of different types\nlist_of_stuff <- list(5, 7:10, c(\"puppies\", \"kittens\"), c(TRUE, FALSE))\n\nclass(list_of_stuff[[2]]) ### numeric vector: 7, 8, 9, 10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(list_of_stuff[[3]]) ### character vector: \"puppies\" and \"kittens\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlist_of_stuff[[1]] <- list(\"bananas\", c(1, 2, 4))\nclass(list_of_stuff[[1]]) ### was numeric, now it's a list!\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\n---\n\n[Data structures in R: data frames]{.slide-title}\n\nA **data frame** is another common data structure in R, and commonly used in data science for tabular data.\n\n::: {.columns}\n\n:::: {.column width=\"40%\"}\n\n![](images/data_structures_dataframe.png){width=100%}\n:::: \n<!-- end left column -->\n\n:::: {.column width=\"60%\"}\n\n::::: {.body-text}\n* Like a matrix, a data frame is two dimensional - but each column can be of a different type!\n* We can create data frames in many ways, including `data.frame()`\n* More commonly we will read in tabular data from spreadsheets like Excel files (`.xlsx`) and comma-separated value (`.csv`) files.\n\n:::::\n\n:::: \n<!-- end right column -->\n\n::: \n<!-- end .columns -->\n\n---\n\n[Data structures in R: data frames]{.slide-title}\n\n:::{.body-text}\nData frames have one or more named **columns**, each representing a variable, and **rows** representing observations with values for each variable.  Let's create a simple one representing three dogs, with ages (in human years) and weights (in pounds).\n:::\n\n::: {.columns}\n\n:::: {.column width=\"65%\"}\nCreate the data frame:\n\n::: {.cell}\n\n```{.r .cell-code}\ndog_df <- data.frame(\n    name   = c('Waffle', 'Khora', 'Teddy'),\n    weight = c(      35,      60,     50),\n    age    = c(       5,       9,      7)\n  )\n```\n:::\n\n\n::::\n\n:::: {.column width=\"35%\"}\nResult:\n\n::: {.cell}\n\n```{.r .cell-code}\ndog_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    name weight age\n1 Waffle     35   5\n2  Khora     60   9\n3  Teddy     50   7\n```\n\n\n:::\n:::\n\n::::\n\n:::\n\n:::{.callout-note}\n\n## Code styling\n\n::::{.body-text}\nNote that spacing, tabs, and new lines don't affect how the R code runs - but they can help make it easier to read! Use code styling to help communicate your intentions to others.\n::::\n\n:::\n\n---\n\n[Data structures in R: data frames]{.slide-title}\n\nWe can explore our data frame using the RStudio IDE.\n\n:::{.body-text}\nTry these out to see how they work:\n  \n* Find the `dog_df` data frame in the **Environment** pane and click on it\n    * Interactive view, try sorting and searching!\n* Find the data frame in the **Environment** pane and click on the blue arrow next to it\n* In the **Console**, type `head(dog_df)` to see the first few rows\n    * Note, our data frame is very short so you'll see all the rows!\n* In the **Console**, type `View(dog_df)` (note capital V) \n    * This is the same as clicking on it in the **Environment** pane.\n:::\n\n---\n\n[Data structures in R: data frames]{.slide-title}\n\n:::{.callout-note}\n\n## A data frame is just a named list of vectors!\n\n::::{.body-text}\nTo help understand how to access information in a data frame, it is helpful to look at it as a **list** of **vectors**, each vector of the same length, and given a handy name!\n::::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndog_df <- data.frame(\n    name   = c('Waffle', 'Khora', 'Teddy'), ### char vec length 3\n    weight = c(      35,      60,     50),  ### num vec length 3\n    age    = c(       5,       9,      7)   ### num vec length 3\n  )\n```\n:::\n\n\n:::{.body-text}\nBecause a data frame is a list of vectors, our single `[...]` and double `[[...]]` square brackets can work, but there are other more elegant ways of retrieving and setting values in a data frame.\n:::\n\n---\n\n[Data structures in R: data frames]{.slide-title}\n\nAccessing elements of a data frame\n\n:::{.body-text}\n* We can access individual elements of a data frame using a 2-d square bracket notation with numbers: `example_df[<row(s)>, <column(s)>]`.\n* We can access entire columns/variables using their name, in two ways:\n    * Double square brackets: `example_df[['<colname>']]`\n    * Dollar sign notation: `example_df$<colname>`\n* We can access specific rows of a variable using a combination:\n    * Dollar sign notation plus index: `example_df$<colname>[<element number>]`\n    \n:::\n\n---\n\n[Data structures in R: data frames]{.slide-title}\n\nAccessing values of elements of a data frame\n    \n:::{.body-text}\nUsing the `dog_df` we created previously:\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndog_df[1, 3]       ### first row, third column: Waffle's age\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\n### leave row or column blank to choose all in that row/col:\ndog_df[ , 1]       ### all rows, first column: name of all dogs \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Waffle\" \"Khora\"  \"Teddy\" \n```\n\n\n:::\n\n```{.r .cell-code}\ndog_df[['weight']] ### weight of all dogs, in order\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 35 60 50\n```\n\n\n:::\n\n```{.r .cell-code}\ndog_df$age         ### age of all dogs, in order\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 9 7\n```\n\n\n:::\n\n```{.r .cell-code}\ndog_df$name[2]     ### name of all dogs, then choose only element 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Khora\"\n```\n\n\n:::\n:::\n\n\n---\n\n[Data structures in R: data frames]{.slide-title}\n\n**Changing** values of elements of a data frame or **adding** new variables\n    \n:::{.body-text}\nUsing the `dog_df` we created previously, let's update Waffle's age and weight, and then add a new column describing the color of each dog.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndog_df[1, 2] <- 34  ### assign new value to row 1, col 2\ndog_df$age[1] <- 6  ### assign new value to age[1]\n\n### create a new column using the $ operator, and assign values\ndog_df$color <- c('tan', 'grey', 'brown') \n\ndog_df  ### inspect the updated data frame\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    name weight age color\n1 Waffle     34   6   tan\n2  Khora     60   9  grey\n3  Teddy     50   7 brown\n```\n\n\n:::\n:::\n\n\n---\n\n[Data structures in R: data frames]{.slide-title}\n\nAccessing elements of a data frame\n\n::: {.callout-note}\n::::{.columns}\n:::::{.column width=\"15%\"}\n![](images/tidyverse_hex.jpg){width=100%}\n:::::\n\n:::::{.column width=\"85%\"}\n:::::{.body-text}\n\nThese methods of accessing data within a dataframe will **always** work in R, as they are part of **Base R**, or the core functionality of the R language.  \n\nLater we will introduce you to a different approach to coding in R, called the **Tidyverse**, that you may find easier and more elegant.\n:::::\n<!-- end body text -->\n:::::\n<!-- end column 2 -->\n::::\n<!-- end columns -->\n:::\n<!-- end note -->\n\n---\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}