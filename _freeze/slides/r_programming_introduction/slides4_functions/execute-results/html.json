{
  "hash": "237a77ceb59a54cb89bb70d306f84a1b",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    slide-number: true\n    code-link: true\n    highlight-style: a11y\n    chalkboard: true\n    theme:\n      - lh_slides_style.scss ### this lives in folder with slide qmd file\nexecute:\n  echo: true\n  code-line-numbers: false\n---\n\n## {#title-slide data-menu-title=\"Title Slide\"} \n\n[Functions in R]{.custom-title}\n\n[An introduction to programming in R]{.custom-subtitle}\n\n<hr class=\"hr-red\">\n\n::: {.column width=\"50%\"}\n[**NCEAS Learning Hub**]{.custom-subtitle2}<br>\n:::\n\n---\n\n[Functions in R]{.slide-title}\n\nA function is a way to group a set of commands together to undertake a task in a reusable way.\n\n:::{.body-text}\nR also has a mind-blowing collection of built-in functions ready to use. To start, we will be using some built in R functions, and later learn to write our own.\n\nWhen we execute or \"call\" a function, usually it looks like the function name with parentheses around the \"arguments\" the function needs in order to do what it was built to do, like this:\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult_val <- function_name(argument1 = val1, argument2 = val2, ...)\n```\n:::\n\n\n---\n\n[Functions in R]{.slide-title}\n\nHere are a few functions we've seen so far:\n\n:::{.body-text}\n\n* `c()` for combining elements into a vector\n* `list()` for creating a list\n* `data.frame()` for creating a data frame\n* `mean()` for calculating the mean value of a vector\n* `head()` for looking at the first few values of some object\n\n:::\n\n---\n\n[Help pages for functions in R]{.slide-title}\n\n:::{.body-text}\n\nRStudio provides an easy way to access the help documentation for functions.\n\nLet's look at the `mean()` function.  To access the help page for `mean()`, enter the following into your **console**:\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(mean) ### `help` function to show a help page for a function\n?mean      ### a more convenient shortcut\n??mean     ### if you don't know the exact function name or package\n```\n:::\n\n\n:::{.callout-tip}\n### Console vs. script panes\n\n::::{.body-text}\n\nMost of the time you should be writing your code in **scripts**.  But there are some things you should generally do in the **console** instead (things you don't need to run every time you run the script):\n\n* help pages - you only need help as you are *writing* your script, not as you *run* it!\n* installing packages with `install.packages()`\n\n::::\n:::\n\n---\n\n[Help pages for functions in R]{.slide-title}\n\nThe Help page is broken down into sections:\n\n:::{.body-text}\n\n-   **Description**: An extended description of what the function does.\n-   **Usage**: The arguments of the function(s) and their default values.\n-   **Arguments**: An explanation of the data each argument is expecting.\n-   **Details**: Any important details to be aware of.\n-   **Value**: The data the function returns.\n-   **See Also**: Any related functions you might find useful.\n-   **Examples**: Some examples for how to use the function.\n\n:::\n\n---\n\n[Help pages for functions in R]{.slide-title}\n\n::: {.callout-note}\n### Not all functions have (or require) arguments\n\nFor example, check out the documentation or Help page for `date()`.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?date()\n```\n:::\n\n\n---\n\n[Functions and packages in R]{.slide-title}\n\n:::{.body-text}\nThere are thousands of built-in functions available when you first start up R, but there are also many many packages available with other functions and/or datasets.\n\nTo install a new package into your library (a location on your computer where R will find the packages) (**do this in the console, not script!**):\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### vetted packages from the CRAN package repository:\ninstall.packages('<packagename here>')\n### some packages are available through GitHub:\nremotes::install_github('<username>/<packagename>')\n```\n:::\n\n\n:::{.body-text}\nJust because a package is **installed** doesn't mean R has access to the functions yet!  We need to load (\"attach\") a package into R from your package library.  Typically you do this at the top of a script.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(packagename) ### note, no quotes needed!\n```\n:::\n\n\n---\n\n[Functions and packages in R]{.slide-title}\n\n:::{.callout-warning}\n### Two common error messages\n\n:::{.body-text}\nAlways carefully read any error messages you get!  Most of the time they are pretty helpful to let you know what you've done wrong.  Here are two common error messages associated with loading packages and functions:\n\n* `Error in library(<packagename>) : there is no package called ‘<packagename>’`\n    * you probably either misspelled the package name or haven't yet installed it.\n* `Error in <functionname>(): could not find function \"<functionname>\"`\n    * you probably have the name wrong, or haven't loaded the package (with `library()`) that contains the function.\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}