{
  "hash": "27381247a25983324b436e5a9b3c92a4",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  revealjs:\n    slide-number: true\n    code-link: true\n    highlight-style: a11y\n    chalkboard: true\n    theme:\n      - lh_slides_style.scss ### this lives in folder with slide qmd file\nexecute:\n  echo: true\n  code-line-numbers: false\n---\n\n## {#title-slide data-menu-title=\"Title Slide\"} \n\n[Welcome to R & RStudio]{.custom-title}\n\n[An introduction to programming in R]{.custom-subtitle}\n\n<hr class=\"hr-red\">\n\n\n[**NCEAS Learning Hub**]{.custom-subtitle2}\n\n---\n\n##  {#rstudio-ide data-menu-title=\"RStudio IDE1\"}\n\n[RStudio IDE interface]{.slide-title}\n\n\n::: {.columns}\n\n:::: {.column width=\"60%\"}\n\n![](images/rstudio_ide.png){width=100%}\n:::: \n<!-- end left column -->\n\n:::: {.column width=\"40%\"}\n\n\nLet's take a tour of the RStudio interface!\n\n:::: \n<!-- end right column -->\n\n::: \n<!-- end .columns -->\n\n\n---\n\n##  {#rstudio-ide2 data-menu-title=\"RStudio IDE2\"}\n\n[RStudio IDE interface]{.slide-title}\n\n::: {.columns}\n\n:::: {.column width=\"60%\"}\n\n![](images/rstudio_ide.png){width=100%}\n:::: \n<!-- end left column -->\n\n:::: {.column width=\"40%\"}\n\n::::: {.body-text}\n\nNotice the default panes:\n\n-   Console (entire left)\n-   Environment/History (tabbed in upper right)\n-   Files/Plots/Packages/Help (tabbed in lower right)\n\n**NOTE:** New tabs may show up in different contexts (e.g., Git tab)\n\n:::::\n\n:::: \n<!-- end right column -->\n\n::: \n<!-- end .columns -->\n\n::: {.body-text}\n**Quick Tip:** You can change the default location of the panes, among many other things. More information [here](https://support.posit.co/hc/en-us/articles/200549016-Customizing-the-RStudio-IDE).\n:::\n\n---\n\n##  {#rstudio-console data-menu-title=\"RStudio Console\"}\n\n[RStudio IDE interface]{.slide-title}\n\n::: {.columns}\n\n:::: {.column width=\"60%\"}\n\n![](images/rstudio_ide_console.png){width=100%}\n:::: \n<!-- end left column -->\n\n:::: {.column width=\"40%\"}\n\n::::: {.body-text}\n\nThe **Console pane** is where you can directly type R code, and R will interpret the code and return some value.  \n\nWhen you first start, you'll see some text including the version of R software currently installed (yours may not match the image!)\n:::::\n\n:::: \n<!-- end right column -->\n\n::: \n<!-- end .columns -->\n\n:::{.body-text}\nNote there are tabs for **Terminal** and **Background Jobs**.  **Terminal** is direct access to your computer's operating system (NOT R software).  We won't do anything with those for now.\n:::\n\n---\n\n##  {#rstudio-envir data-menu-title=\"RStudio Environment\"}\n\n[RStudio IDE interface]{.slide-title}\n\n::: {.columns}\n\n:::: {.column width=\"60%\"}\n\n![](images/rstudio_ide_envir.png){width=100%}\n:::: \n<!-- end left column -->\n\n:::: {.column width=\"40%\"}\n\n::::: {.body-text}\n\nThe **Environment pane** is where R will display information it is holding in memory - \"objects\" that may contain individual values, lists or vectors containing multiple values, data frames containing tabular data, etc.\n\nWhen you first start up, if you have set things up as we prefer to set them, the Environment pane will say \"Environment is empty.\"  Later, as we use R to make some simple calculations, you will see objects in this pane.\n:::::\n\n:::: \n<!-- end right column -->\n\n::: \n<!-- end .columns -->\n\n:::{.body-text}\nNote there is a tab for **History** and perhaps others.  **History** will show you the sequence of any commands you have typed or executed into R.  When we start writing **R scripts**, you will see that the History tab is not something we need for reproducible science.\n:::\n\n---\n\n##  {#rstudio-files data-menu-title=\"RStudio Files\"}\n\n[RStudio IDE interface]{.slide-title}\n\n::: {.columns}\n\n:::: {.column width=\"60%\"}\n\n![](images/rstudio_ide_files.png){width=100%}\n:::: \n<!-- end left column -->\n\n:::: {.column width=\"40%\"}\n\n::::: {.body-text}\n\nThe **Files pane** displays files and folders where you might store R scripts, datasets, images, etc.\n\nYou can navigate around these files just like you would normally browse on your computer, and open scripts, inspect data, etc.\n:::::\n\n:::: \n<!-- end right column -->\n\n::: \n<!-- end .columns -->\n\n:::{.body-text}\nNote the other tabs: when you create plots, this pane will switch to that tab and show you the plots.  You can see what packages (and versions) you have installed, get help on functions and packages, and view HTML or other outputs on these tabs.\n:::\n\n---\n\n[Coding in the Console]{.slide-title}\n\n:::{.body-text}\nWe can run code in the Console window - direct access to the R application.  Let's start there, but later we'll generally not do much in the console, but instead in scripts.\n\nAt its most basic, we can use R as a calculator.  Let's try a couple of examples in the console.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 * 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n\n```{.r .cell-code}\n3 + 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n\n```{.r .cell-code}\n3 - 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1\n```\n\n\n:::\n\n```{.r .cell-code}\n3 / 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.75\n```\n\n\n:::\n:::\n\n\n:::{.body-text}\nNotice when you hit \"enter\" after the calculation, R immediately evaluates the calculation for you and tells you the result.\n:::\n\n---\n\n[Coding in the Console]{.slide-title}\n\n<hr>\n\n::: {.callout-caution icon=\"false\"}\n#### Quick Tip\n\nWhen you're in the console you'll see a greater than sign (`>`) at the start of a line. This is called the \"prompt\" and when we see it, it means R is ready to accept commands. If you see a plus sign (`+`) in the Console, it means R is waiting on additional information before running. You can always press escape (`esc`) to return to the prompt. Try practicing this by running `3*` (or any incomplete expression) in the console.\n:::\n\n---\n\n## {#example-code-slide data-menu-title=\"Example Code\"}\n\n[Storing values in objects]{.slide-title}\n\n<hr>\n\n::: {.body-text}\nWe can assign the value of some calculation to an \"object\" by giving it a name.\nFor example, we can store the result of the calculation `3 * 4` and call it \"result\".\nThen we can call the name of the object to retrieve the value.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- 3 * 4   ### assign the value\n\nresult            ### retrieve the value\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n\n::: {.body-text}\nTechnically, we are creating an object called \"result\" and assigning the value to that object.  Then we can call the *name* of the object to use the *value* in other calculations, and so on.\n:::\n\n---\n\n[Storing values in objects]{.slide-title}\n\n<hr>\n\n::: {.body-text}\nHere's a slightly more complicated example to calculate the volume of a cylinder.\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- 5            ### radius of cylinder is 5 units\narea <- pi * r^2  ### calculate the area, using r\n\narea              ### report the area\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 78.53982\n```\n\n\n:::\n\n```{.r .cell-code}\nh <- 7            ### height of cylinder is 7 units\nvol <- area * h   ### volume is area X height\n\nvol               ### report the volume\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 549.7787\n```\n\n\n:::\n:::\n\n\n---\n\n##  {#rstudio-envir2 data-menu-title=\"RStudio Environment2\"}\n\n[RStudio IDE interface]{.slide-title}\n\n::: {.columns}\n\n:::: {.column width=\"60%\"}\n\n![](images/rstudio_ide_envir2.png){width=100%}\n:::: \n<!-- end left column -->\n\n:::: {.column width=\"40%\"}\n\n::::: {.body-text}\n\nCheck the **Environment pane** again - it no longer says \"Environment is empty\" but instead contains the objects and values we created in our example.\n:::::\n\n:::: \n<!-- end right column -->\n\n::: \n<!-- end .columns -->\n\n---\n\n[R scripts vs. console]{.slide-title}\n\n<hr>\n\n::: {.body-text}\nWhile there are many cases where it makes sense to type code directly in to the the console, it is not a great place to write most of your code since you can't save what you ran. \n:::\n\n**A better way is to create an R Script, and write your code there.** \n\n::: {.body-text}\nThen when you run your code from the script, you can save it when you are done, and you can re-run it later to get the exact same result - a key to  **reproducible science**. We're going to work some more example code in the Console for now, but we'll code in an R Script later in this lesson.\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}