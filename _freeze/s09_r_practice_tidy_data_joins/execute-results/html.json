{
  "hash": "48fdf423041ab2badd1546052a145a1b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Practice Session: Joins\"\n---\n\n\n\n\n:::{.callout-tip}\n## Learning Objectives\n\n-   Practice joining tables together\n-   Practice identifying primary and foreign keys\n-   Practice using common cleaning and wrangling functions\n:::\n\n::: callout-note\n## Acknowledgements\n\nThese exercises are adapted from Allison Horst's EDS 221: Scientific Programming Essentials Course for the Bren School's Master of Environmental Data Science program.\n:::\n\n## About the data {.unnumbered}\n\nThese exercises will be using bird survey data collected from the central Arizona-Phoenix metropolitan area by Arizona State University researchers [@warren2021].\n\n## Exercise 1: Practice Joins {.unnumbered}\n\n::: callout-tip\n## Setup\n\n0. Make sure you're in the right project (`training_{USERNAME}`) and use the Git workflow by `Pull`ing to check for any changes in the remote repository (aka repository on GitHub).\n\n1. Create a new Quarto Document. \n    a. Title it \"R Practice: Tidy Data and Joins\". \n    b. Save the file and name it \"r-practice-tidy-data-joins\" in your `scripts` folder. \n\n**Note:** Double check that you're in the right project. Where in RStudio can you check where you are?\n\n2.  Load the following libraries at the top of your Quarto Document.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(readr)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at C:/Users/casey/Documents/github/duke_data_sci\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(lubridate) # for bonus question\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'lubridate'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\n# Quick question: Do you get a message after loading the libraries? What is it telling you? Talk to your neighbor about it or write a note in your qmd.\n```\n:::\n\n\n\n\n3.  Obtain data from the EDI Data Portal [Ecological and social interactions in urban parks: bird surveys in local parks in the central Arizona-Phoenix metropolitan area](https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-cap&identifier=256&revision=10). Download the following files:\n\n-   `52_pp52_birds_1.csv`\n-   `52_pp52_surveys_1.csv`\n-   `52_pp52_sites_1.csv`\n-   `52_pp52_taxalist_1.csv`\n\n**Note:** It's up to you on how you want to download and load the data! You can either use the download links (obtain by right-clicking the \"Download\" button and select \"Copy Link Address\" for each data entity) or manually download the data and then upload the files to RStudio server.\n\n4. Organize your Quarto Document in a **meaningful** way. Organization is personal - so this is up to you! Consider the different ways we've organized previous files using: headers, bold text, naming code chunks, comments in code chunks. What is most important is organizing and documenting the file so that your future self (or if you share this file with others!) understands it as well as your current self does right now. \n\n5. Use the Git workflow. After you've set up your project and uploaded your data go through the workflow: ```Stage (add) -> Commit -> Pull -> Push```\n    - **Note:** You also want to `Pull` when you first open a project.\n:::\n\n## Read in the data\n\n::: callout-note\n#### Question 1\n\nRead in the data and store the data frames as `bird_observations`, `sites`, `surveys`, and `taxalist` (it should be clear from the raw file names which is which).\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 40425 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): site_id, species_id, distance, notes, direction\ndbl (4): survey_id, bird_count, seen, heard\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 2004 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): site_id, observer, wind_dir, notes\ndbl  (4): survey_id, wind_speed, air_temp, cloud_cover\nlgl  (1): temp_units\ndttm (3): survey_date, time_start, time_end\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 221 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): site_id, park_code, park_district, park_name, point_code\nlgl (2): point_location, park_acreage\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 259 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): species_id, common_name\ndbl (1): asu_itis\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Answer\"}\n# read in data from the data directory after manually downloading data \nbird_observations <- read_csv(here::here(\"data/52_pp52_birds_1.csv\"))\nsurveys <- read_csv(here::here(\"data/52_pp52_surveys_1.csv\"))\nsites <- read_csv(here::here(\"data/52_pp52_sites_1.csv\"))\ntaxalist <- read_csv(here::here(\"data/52_pp52_taxalist_1.csv\"))\n```\n:::\n\n\n\n\n## Get familiar with the data\n\n::: callout-note\n#### Question 2a\n\nWhat functions can you use to explore the data you just read in? Think about which functions we've been using to explore the structure of the data frame, information about columns, unique observations, etc.\nTip: run `View(name_of_your_data_frame)` **in the console** to see data in a spreadsheet-style viewer.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Answer\"}\n# returns dimensions of the dataframe by number of rows and number of cols\ndim(bird_observations)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 40425     9\n```\n\n\n:::\n\n```{.r .cell-code  code-summary=\"Answer\"}\n# returns the top six rows of the dataframe\nhead(bird_observations)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 9\n  survey_id site_id species_id distance bird_count notes  seen heard direction\n      <dbl> <chr>   <chr>      <chr>         <dbl> <chr> <dbl> <dbl> <chr>    \n1       144 LI-S    HOSP       5-10              4 <NA>      1     1 NE       \n2       145 LI-W    HOSP       20-40            10 <NA>      0     1 E        \n3       145 LI-W    AUWA       20-40             2 <NA>      0     1 SE       \n4       145 LI-W    RODO       FT                2 <NA>      1     0 E        \n5       145 LI-W    GTGR       >40               2 <NA>      0     1 NE       \n6       145 LI-W    WCSP       20-40             3 <NA>      0     1 N        \n```\n\n\n:::\n\n```{.r .cell-code  code-summary=\"Answer\"}\n# returns all the columns and some info about the cols\nglimpse(bird_observations)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 40,425\nColumns: 9\n$ survey_id  <dbl> 144, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,…\n$ site_id    <chr> \"LI-S\", \"LI-W\", \"LI-W\", \"LI-W\", \"LI-W\", \"LI-W\", \"LI-W\", \"LI…\n$ species_id <chr> \"HOSP\", \"HOSP\", \"AUWA\", \"RODO\", \"GTGR\", \"WCSP\", \"WCSP\", \"GT…\n$ distance   <chr> \"5-10\", \"20-40\", \"20-40\", \"FT\", \">40\", \"20-40\", \"20-40\", \"F…\n$ bird_count <dbl> 4, 10, 2, 2, 2, 3, 3, 2, 2, 3, 1, 10, 3, 1, 6, 6, 20, 12, 2…\n$ notes      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ seen       <dbl> 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0,…\n$ heard      <dbl> 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1,…\n$ direction  <chr> \"NE\", \"E\", \"SE\", \"E\", \"NE\", \"N\", \"E\", \"E\", \"S\", \"E\", \"NE\", …\n```\n\n\n:::\n\n```{.r .cell-code  code-summary=\"Answer\"}\n# similar to glimpse but returns some summary statistics about the cols\nsummary(bird_observations)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   survey_id      site_id           species_id          distance        \n Min.   :   1   Length:40425       Length:40425       Length:40425      \n 1st Qu.: 570   Class :character   Class :character   Class :character  \n Median :1028   Mode  :character   Mode  :character   Mode  :character  \n Mean   :1043                                                           \n 3rd Qu.:1550                                                           \n Max.   :2001                                                           \n                                                                        \n   bird_count          notes                seen            heard       \n Min.   :   1.000   Length:40425       Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:   1.000   Class :character   1st Qu.:1.0000   1st Qu.:0.0000  \n Median :   2.000   Mode  :character   Median :1.0000   Median :0.0000  \n Mean   :   2.938                      Mean   :0.8463   Mean   :0.4967  \n 3rd Qu.:   3.000                      3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1000.000                      Max.   :1.0000   Max.   :1.0000  \n NA's   :33                                                             \n  direction        \n Length:40425      \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n```\n\n\n:::\n\n```{.r .cell-code  code-summary=\"Answer\"}\n# returns column names \nnames(bird_observations)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"survey_id\"  \"site_id\"    \"species_id\" \"distance\"   \"bird_count\"\n[6] \"notes\"      \"seen\"       \"heard\"      \"direction\" \n```\n\n\n:::\n\n```{.r .cell-code  code-summary=\"Answer\"}\n# returns unique values in a column. In this case we can see all the different bird species IDs\nunique(bird_observations$species_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"HOSP\" \"AUWA\" \"RODO\" \"GTGR\" \"WCSP\" \"MODO\" \"NOMO\" \"EUST\" \"ANHU\" \"CBTH\"\n [11] \"INDO\" \"GIWO\" \"HOFI\" \"VERD\" \"GHJU\" \"ORJU\" \"KILL\" \"BCHU\" \"ABTO\" \"CACW\"\n [21] \"WEME\" \"CORA\" \"NOHA\" \"NOFL\" \"PYRR\" \"CANW\" \"GIFL\" \"SCJU\" \"BRCR\" \"RCKI\"\n [31] \"COHU\" \"BGGN\" \"SAPH\" \"AMKE\" \"HAHA\" \"HOLA\" \"LOSH\" \"AMGO\" \"BEVI\" \"OCWA\"\n [41] \"BRSP\" \"COYE\" \"SPTO\" \"WBNU\" \"noca\" \"BTSP\" \"ROWR\" \"PHAI\" \"RWBL\" \"FEHA\"\n [51] \"COHA\" \"RTHA\" \"ATFL\" \"BHCO\" \"BRBL\" \"UNDO\" \"SOVI\" \"MALL\" \"SSHA\" \"CEDW\"\n [61] \"AMRO\" \"WEBL\" \"GAQU\" \"LEWO\" \"unwa\" \"CAGO\" \"LEGO\" \"broc\" \"WWDO\" \"COFL\"\n [71] \"SOSP\" \"NRWS\" \"GBHE\" \"WEKI\" \"NAWA\" \"LBWO\" \"BTGN\" \"YWAR\" \"UDEJ\" \"BCNH\"\n [81] \"BTYW\" \"LUWA\" \"CLSW\" \"CAKI\" \"UNTA\" \"PFLB\" \"UNHA\" \"HRSH\" \"BETH\" \"UNWO\"\n [91] \"RSFL\" \"WIWA\" \"WEFL\" \"unhu\" \"GRRO\" \"ECDO\" \"BROC\" \"HOOR\" \"NOCA\" \"TOWA\"\n[101] \"YHBL\" \"WTSW\" \"UNTH\" \"RUHU\" \"WETA\" \"AMCO\" \"LENI\" \"UYRW\" \"LASP\" \"RNSA\"\n[111] \"UNFL\" \"BLPH\" \"MGWA\" \"TUVU\" \"UNBL\" \"TRES\" \"UNSP\" \"GREG\" \"SNEG\" \"UNSW\"\n[121] \"CHSP\" \"WAVI\"\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-note\n#### Question 2b\n\nWhat are the primary and foreign keys for the tables `bird_observations` and `taxalist`? Recall that a **primary key** is a unique identifier for each observed entity, one per row. And a **foreign key** references to a primary key in another table (linkage).\n\n**Hint:** First identify the primary keys for all the tables, then identify the foreign keys.\n:::\n\n<details>\n\n<summary>Answer</summary>\n\n-   `bird_observations`: Primary key is a compound key made up of `survey_id`, `site_id`, and `species_id`. The foreign key is `species_id`.\n-   `taxalist`: Primary key is `species_id` and does not have a foreign key that match the primary key in `bird_observations`.\n\nHowever, we could join `bird_observations` and `taxalist` by `species_id`, but depending on the type of join some values would be droped or `NAs` would be introduce in the resulting data frame.\n\n</details>\n\n## Create a subset of `bird_observations`\n\n::: callout-note\n#### Question 3\n\nWrite code to create a subset of `bird_observations` called `birds_subset` that only contains observations for birds with species id `BHCO` and `RWBL`, and from sites with site ID `LI-W` and `NU-C`.\n\n**Hint:** What function do you use to subset data by rows?\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Answer\"}\nbirds_subset <- bird_observations %>% \n  filter(species_id %in% c(\"BHCO\", \"RWBL\")) %>% \n  filter(site_id %in% c(\"LI-W\", \"NU-C\"))\n```\n:::\n\n\n\n\n## Use `left_join()` to merge `birds_subset` with the tables `sites`\n\n::: callout-note\n#### Question 4a\n\nFirst, answer: what do you expect the outcome data frame when doing `left_join()` between `birds_subset` and `sites` to look like? What observations do you expect in the outcome data frame.\n\nYou can use paper to draw if that helps you or talk to your neighbor. Write down the steps  and expected outcome in your Quarto Document.\n:::\n\n<details>\n\n<summary>Answer</summary>\n\nI expect to see all columns and all observations from `birds_subset` and from `sites`, I expect to see the columns `park_code`, `park_district`, `park-name`, `point_code`, `point_location` and `park_acreage` and only observations for `NU-C` and `LI-W` because those are the only `site_id` values in `birds_subset` and in a left join only the observations matching the left table (in this case, `birds_subset` is the left table) will be kept.\n\n</details>\n\n\n::: callout-note\n#### Qustion 4b\n\nUse a left join to update `birds_subset` so that it also includes `sites` information. For each join, include an explicit argument saying which key you are joining by (even if it will just assume the correct one for you). Store the updated data frame as `birds_left`. Make sure to look at the output - is what it contains consistent with what you expected it to contain?\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Answer\"}\n# syntax using pipe\nbirds_left <- birds_subset %>% \n  left_join(y = sites, by = \"site_id\")\n# don't see x = birds_subset here because piping in birds_subset means it automatically assumes birds_subset as x.\n\n# syntax without pipe\nbirds_left <- left_join(x = birds_subset, y = sites, by = \"site_id\")\n```\n:::\n\n\n\n\n## Use `full_join()` to merge `birds_subset` and `sites` tables\n\n::: callout-note\n#### Question 5a\n\nFirst, answer: what do you expect a `full_join()` between `birds_subset` and `sites` to contain? Write this in your Quarto Document or tell a neighbor.\n:::\n\n<details>\n\n<summary>Answer</summary>\n\nI expect to see all columns and all observations from `birds_subset` and all columns and all observations from `sites` to be merged into one data frame because in a full join everything is kept. `NA` values could be introduced.\n\n</details>\n\n::: callout-note\n#### Questions 5b\n\nWrite code to `full_join()` the `birds_subset` and `sites` data into a new object called `birds_full`. Explicitly include the variable you're joining by. Look at the output. Is it what you expected?\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Answer\"}\n# syntax using pipe\nbirds_full <- birds_subset %>% \n  full_join(y = sites, by = \"site_id\")\n\n# syntax without pipe\nbirds_full <- full_join(x = birds_subset, y = sites, by = \"site_id\")\n```\n:::\n\n\n\n\n\n## Use `inner_join()` to merge `birds_subset` and `taxalist` data\n\n::: callout-note\n#### Question 6a\nFirst, answer: what do you expect an `inner_join()` between `birds_subset` and `taxalist` to contain? Write this in your Quarto Document or tell a neighbor.\n:::\n\n<details>\n\n<summary>Answer</summary>\n\nI expect to only have data merge together based on `species_id` and since there is only `BHCO` and `RWBL` in `birds_subset` then I will only retain data related to those two species. I will also expect to see the columns from `taxalist`: `common_name` and `asu_itis` to be merged into the joined table.\n\n</details>\n\n::: callout-note\n#### Question 6b\nWrite code to `inner_join()` the `birds_subset` and `taxalist`, called `birds_inner.` Include an argument for what variable you'll be joining by. Make sure you check the output.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Answer\"}\n# syntax using pipe\nbirds_inner <- birds_subset %>% \n  inner_join(y = taxalist, by = \"species_id\")\n\n# syntax without pipe\nbirds_inner <- inner_join(x = birds_subset, y = taxalist, by = \"species_id\" )\n```\n:::\n\n\n\n\n::: callout-note\n#### Question 6c\nWhat would you get if instead of `inner_join()` you'd used `left_join()` for this example? Write code for the left join and check.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Answer\"}\n# syntax using pipe\nbirds_inner_left <- birds_subset %>% \n  left_join(y = taxalist, by = \"species_id\")\n\n# syntax without pipe\nbirds_inner_left <- left_join(x = birds_subset, y = taxalist, by = \"species_id\")\n```\n:::\n\n\n\n\n::: callout-note\n#### Question 6d\nWhy does that make sense for this scenario? In what case would you expect the outcome to differ from an `inner_join()`? Write this in your Quarto Document or tell a neighbor.\n:::\n\n<details>\n\n<summary>Answer</summary>\n\nYou have the same resulting data set regardless of using `inner_join()` or `left_join()` to merge `bird_subset` and `taxalist`. The reasons for this are:\n\n- `inner_join()` keeps only the rows (observations) that have a matching key across both data sets - here, `species_id` is our key, and the only rows that match across both data sets are those where `species_id` equals `BHCO` or `RWBL`\n\n- `left_join()` keeps all rows from the left table (in our case, the left table is `birds_subset`) and merges on data with matching keys (`species_id`) on the right (here, the right table is `taxalist`). Because our left data set (`birds_subset`) only contains `species_id`s equal to `BHCO` or `RWBL`, only rows with those species will be kept from the right data set (`taxalist`)\n\nYou'd expect the outcome to differ from an `inner_join()` if `birds_subset` contained an observation with a `species_id` that was *not* found in `taxalist`. If there was an observation of a `species_id` in `birds_subset` that was *not* in `taxalist`, then that observation would be kept, and `NA`s would be assigned to the `common_name` and `asu_itis` columns for that observations\n\n</details>\n\n## Exercise 2: Practice Wrangling & Joining Data {.unnumbered}\n\n## Wrangle `bird_observations` data and merge the data with all the other tables (`sites`, `surveys`, and `taxalist`)\n\n::: callout-note\n#### Question 7a\nStarting with your object `bird_observations`, rename the `notes` column to `bird_obs_notes` (so this doesn't conflict with `notes` in the `surveys` table).\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Answer\"}\nbird_observations <- bird_observations %>% \n  rename(bird_obs_notes = notes)\n```\n:::\n\n\n\n\n::: callout-note\n#### Question 7b\n\n- Create a subset that contains all observations in the `birds_observations` data frame, \n- then join the `taxalist`, `sites` and `surveys` tables to it, \n- and finally limit to only columns `survey_date`, `common_name`, `park_name`, `bird_count`, and `observer`. \n\n**Hint:** What function do you use to subset data by columns?\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Answer\"}\nbird_obs_subset <- bird_observations %>% \n  full_join(y = taxalist, by = \"species_id\") %>% \n  full_join(y = sites, by = \"site_id\") %>% \n  full_join(y = surveys, by = c(\"site_id\", \"survey_id\")) %>%  \n  select(survey_date, common_name, park_name, bird_count, observer)\n```\n:::\n\n\n\n\n## Explore `observer` data and fix the values within this column so that all values are in the same format\n\n::: callout-note\n#### Question 8a\nContinuing with `bird_obs_subset`, first use `unique()` to see the different unique values in the column `observer`. How many observers are there? Which value is unlike the others?\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Answer\"}\nunique(bird_obs_subset$observer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"B. Rambo\"   \"J. Lemmer\"  \"D. Stuart\"  \"C. Putnam\"  \"S. Lerman\" \n[6] \"Josh Burns\" NA          \n```\n\n\n:::\n:::\n\n\n\n\n::: callout-note\n#### Question 8b\nReplace \"Josh Burns\" with a format that matches the other observer names. Then use `unique()` again to check your work.\n\n**Hint:** What function do you use when you are making a change to an entire column?\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Answer\"}\nbird_obs_subset <- bird_obs_subset %>% \n  mutate(observer = if_else(condition = observer == \"Josh Burns\", \n                            true = \"J. Burns\", \n                            false = observer))\n\nunique(bird_obs_subset$observer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"B. Rambo\"  \"J. Lemmer\" \"D. Stuart\" \"C. Putnam\" \"S. Lerman\" \"J. Burns\" \n[7] NA         \n```\n\n\n:::\n:::\n\n\n\n\n::: callout-important\n## Save your work and dont's forget the Git and GitHub Workflow\nAfter you've completed the exercises or reached a significant stopping point, use the workflow: ```Stage (add) -> Commit -> Pull -> Push```\n:::\n\n## Bonus: Use a new package `lubridate` to wrangle the date data and find the total number of birds by park and month\n\n**Hint:** How do you learn about a new function or package?\n\n::: callout-note\n#### Bonus Question(s)\n\n1. Use `lubridate::month()` to add a new column to `bird_obs_subset` called `survey_month`, containing only the month number. Then, convert the month number to a factor (again within `mutate()`).\n\n2. Use `dplyr::relocate()` to move the new `survey_month` column to immediately after the `survey_date` column. You can do this in a separate code chunk, or pipe straight into it from your existing code.\n\n3. Filter to only include parks `Lindo`, `Orme`, `Palomino`, and `Sonrisa`.\n\n4. Find the total number of birds observed by park and month (**Hint:** You can use `group_by()` and `summarize()`).\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Answer\"}\nbird_obs_subset <- bird_obs_subset %>% \n  mutate(survey_month = lubridate::month(survey_date)) %>% \n  mutate(survey_month = as.factor(survey_month)) %>% \n  dplyr::relocate(survey_month, .after = survey_date) %>% \n  filter(park_name %in% c(\"Lindo\", \"Orme\", \"Palomino\", \"Sonrisa\")) %>% \n  group_by(park_name, survey_month) %>% \n  summarize(tot_bird_count_month = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'park_name'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\n\n\nTake a look at your final data frame. Does it give you the outcome you expected? Is it informative? How would you improve this wrangling process?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}